<!DOCTYPE html>
<html lang="tr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ürün Barkot Okutma ve Stoktan Düşme</title>
  <style>
body {
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
background-color: #f0f2f5;
color: #333;
margin: 0;
padding: 0;
}

.container {
max-width: 800px;
margin: 40px auto;
background-color: #fff;
padding: 20px;
border-radius: 10px;
box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

h1 {
text-align: center;
color: #007bff;
font-size: 2.5rem;
margin-bottom: 20px;
}

#barcodeInput {
width: 96%;
padding: 15px;
font-size: 1rem;
border: 2px solid #ccc;
border-radius: 5px;
background-color: #fafafa;
color: #333;
margin-bottom: 20px;
transition: border-color 0.3s, box-shadow 0.3s;
}

#barcodeInput:focus {
border-color: #007bff;
box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
outline: none;
}

#barcodeList {
list-style: none;
padding: 0;
margin: 0;
max-height: 200px;
overflow-y: auto;
border: 1px solid #ccc;
border-radius: 5px;
background-color: #fafafa;
}

#barcodeList li {
padding: 10px;
border-bottom: 1px solid #eee;
}

#barcodeList li:nth-child(odd) {
background-color: #f5f5f5;
}

#results {
margin-top: 20px;
padding: 20px;
background-color: #fff;
border: 1px solid #ccc;
border-radius: 10px;
}

.product-info {
padding: 15px;
background-color: #f5f5f5;
border: 1px solid #ddd;
border-radius: 5px;
margin-bottom: 15px;
}

.product-info p {
margin: 0 0 10px;
font-size: 1rem;
}

.error-message {
color: #d9534f;
text-align: center;
margin-top: 10px;
}

.button-container {
display: flex;
justify-content: space-between;
margin-top: 20px;
}

.button-container button {
width: 48%;
padding: 15px;
font-size: 1rem;
color: #fff;
border: none;
border-radius: 5px;
cursor: pointer;
transition: background-color 0.3s, box-shadow 0.3s;
}

#selectProductsButton {
background-color: #007bff;
}

#selectProductsButton:hover {
background-color: #0056b3;
box-shadow: 0 0 10px rgba(0, 123, 255, 0.5);
}

#closeRegisterButton {
background-color: #d9534f;
}

#closeRegisterButton:hover {
background-color: #c9302c;
box-shadow: 0 0 10px rgba(217, 83, 79, 0.5);
}

.popup {
display: none;
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 100%;
background-color: rgba(0, 0, 0, 0.5);
z-index: 1000;
}

.popup-content {
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
background-color: #fff;
padding: 20px;
border-radius: 10px;
box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
max-height: 80%;
overflow-y: auto;
width: 80%;
max-width: 600px;
}

.popup-close {
position: absolute;
top: 10px;
right: 10px;
cursor: pointer;
color: #333;
}

.product-item {
margin-bottom: 10px;
}

.product-item label {
display: block;
margin-bottom: 5px;
}

.product-item input[type="checkbox"] {
margin-right: 5px;
}

header {
background-color: #2c3e50;
color: white;
padding: 20px 0;
text-align: center;
box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

nav a {
color: white;
margin: 0 15px;
text-decoration: none;
font-weight: bold;
transition: color 0.3s;
}

nav a:hover {
color: #cce4ff;
}
  </style>
</head>
  <header>
    <h1 style="color:white">Stok Takip Sistemi</h1>
    <nav>
      <a href="/">Ana Sayfa</a>
      <a href="/add">Yeni Ürün Ekle</a>
      <a href="/find">Ürün Bul</a>
      <a href="/scan">Kasa Modu</a>
      <a href="/memory">Geçmiş Alışveriş(ler)</a>
      <a href="/dayEndingReport">Gün Sonu Raporu</a>
    </nav>
  </header>
<body>
  <div class="container">
    <h1>Ürün Barkot Okutma ve Stoktan Düşme</h1>

    <input type="text" id="barcodeInput" placeholder="Barkod girin ve Enter'a basın...">
    <ul id="barcodeList"></ul>

    <div id="results"></div>
    <div id="error-message" class="error-message"></div>

    <div class="button-container">
      <button id="selectProductsButton">Ürünleri Seç</button>
      <button id="closeRegisterButton">Kasa Kapat</button>
      
    <div class="popup" id="productSelectPopup">
      <div class="popup-content">
        <span class="popup-close" onclick="closePopup()">&times;</span>
        <h2>Ürünleri Seç</h2>
        <div id="productList"></div>
        <div class="button-container">
          <button onclick="selectProducts()" style="background-color: #28a745">Seç</button>
        </div>
      </div>
    </div>
      
<script>
  const barcodeInput = document.getElementById('barcodeInput');
  const barcodeList = document.getElementById('barcodeList');
  const selectProductsButton = document.getElementById('selectProductsButton');
  const closeRegisterButton = document.getElementById('closeRegisterButton');
  const resultsDiv = document.getElementById('results');
  const errorMessageDiv = document.getElementById('error-message');
  const productSelectPopup = document.getElementById('productSelectPopup');
  let barcodes = [];
  let countedBarcodes = {};
  let totalPrice = 0;

  barcodeInput.addEventListener('keyup', function(event) {
    if (event.key === 'Enter') {
      const barcode = barcodeInput.value.trim();
      if (barcode !== '') {
        barcodes.push(barcode);
        barcodeInput.value = '';
        renderBarcodeList();
        processBarcode(); // Enter tuşuna basıldığında sonuçları işle
      }
    }
  });
  
  selectProductsButton.addEventListener('click', function() {
    fetchProducts();
  });

  function fetchProducts() {
    fetch('/listAll')
      .then(response => response.json())
      .then(data => {
        products = data;
        renderProductList();
        openPopup();
      })
      .catch(error => {
        console.error('Error:', error);
        showError('Ürünler getirilirken bir hata oluştu.');
      });
  }
  
  function renderProductList() {
    const productList = document.getElementById('productList');
    productList.innerHTML = '';
    products.forEach(product => {
      const productItem = `
        <div class="product-item">
          <label>
            <input type="checkbox" name="selectedProducts" value="${product.barcode}">
            ${product.name} - Barkod: ${product.barcode} - Stok: ${product.stock}
          </label>
        </div>
      `;
      productList.insertAdjacentHTML('beforeend', productItem);
    });
  }
  
  function selectProducts() {
    const selectedCheckboxes = document.querySelectorAll('input[name="selectedProducts"]:checked');
    const selectedBarcodes = Array.from(selectedCheckboxes).map(checkbox => checkbox.value);
    barcodes = selectedBarcodes;
    closePopup();
    processBarcode();
  }
  
  function openPopup() {
    productSelectPopup.style.display = 'block';
  }

  function closePopup() {
    productSelectPopup.style.display = 'none';
  }

  function renderBarcodeList() {
    barcodeList.innerHTML = '';
    barcodes.forEach(function(barcode) {
      const li = document.createElement('li');
      li.textContent = barcode;
      barcodeList.appendChild(li);
    });
  }

  function processBarcode() {
    if (barcodes.length > 0) {
      // POST request to backend with barcodes array
      fetch('/scan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ barcodes })
      })
      .then(response => response.json())
      .then(data => {
        console.log(data)
        if (data.length === 0) {
          showError('Böyle bir barkot bulunamadı.');
        } else {
          hideError();
        if (data[0].scannedProduct.stock < 1) {
          showError(`Ürün Stok seviyesi yetersiz: ${data[0].scannedProduct.stock + " - " + data[0].scannedProduct.name}`)    
          processResults(data);
        } else {
          updateCountedBarcodes(data);
          processResults(data);
        }
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showError('İşlem sırasında bir hata oluştu.');
      });
    } else {
      showError('Lütfen en az bir barkod girin.');
    }
  }

  function showError(message) {
    errorMessageDiv.textContent = message;
  }

  function hideError() {
    errorMessageDiv.textContent = '';
  }

  function updateCountedBarcodes(results) {
    // Barkodların sayısını hesapla
    barcodes.forEach(barcode => {
      if (!countedBarcodes[barcode]) {
        const result = results.find(r => r.scannedProduct && r.scannedProduct.barcode === barcode);
        if (result && result.scannedProduct) {
          countedBarcodes[barcode] = {
            count: 0,
            product: result.scannedProduct
          };
        } else {
          showError(`Barkod ${barcode} bulunamadı.`);
        }
      }
      if (countedBarcodes[barcode]) {
        countedBarcodes[barcode].count++;
      }
    });

    // toplam fiyatı yeniden hesapla
    totalPrice = 0;
    Object.keys(countedBarcodes).forEach(barcode => {
      const item = countedBarcodes[barcode];
      totalPrice += item.product.price * item.count;
    });
  }

  function processResults(results) {
    resultsDiv.innerHTML = ''; // Sonuçları temizle

    // Tüm barkodları işleyerek sonuçları göster
    Object.keys(countedBarcodes).forEach(barcode => {
      const { count, product } = countedBarcodes[barcode];
      const { name, price, stock } = product;
      const productTotalPrice = price * count; // Bu ürün için toplam fiyat
      const productInfo = `
        <div class="product-info">
          <p><strong>Barkod:</strong> ${barcode}</p>
          <p><strong>Ürün Adı:</strong> ${name}</p>
          <p><strong>Fiyat:</strong> ${price} TL</p>
          <p><strong>Stok:</strong> ${stock} adet</p>
          <p><strong>Okutulan Adet:</strong> ${count}</p>
          <p><strong>Toplam Fiyat:</strong> ${productTotalPrice.toFixed(2)} TL</p>
        </div>
      `;
      // Sonuçları gösterirken her barkodu sadece bir kez göster
      if (!resultsDiv.querySelector(`[data-barcode="${barcode}"]`)) {
        const div = document.createElement('div');
        div.innerHTML = productInfo;
        div.setAttribute('data-barcode', barcode);
        resultsDiv.appendChild(div);
      } else {
        const existingDiv = resultsDiv.querySelector(`[data-barcode="${barcode}"]`);
        existingDiv.innerHTML = productInfo;
      }
    });

    // Toplam fiyatı göster
    const totalInfo = `
      <div class="product-info">
        <p><strong>Toplam Fiyat:</strong> ${totalPrice.toFixed(2)} TL</p>
      </div>
    `;
    resultsDiv.innerHTML += totalInfo;

    barcodes = []; // Listeyi temizle ancak countedBarcodes ve totalPrice'ı koru
    renderBarcodeList(); // Listeyi güncelle
  }

  function closeRegister() {
    // Kasa kapatma işlemi
    Object.keys(countedBarcodes).forEach(barcode => {
      const { count, product } = countedBarcodes[barcode];
      downOfStock(barcode, count); // Stoktan düşürme işlemi
    });
    
    // Backend'e alışveriş bilgilerini kaydetme işlemi
    fetch('/closeShopping', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ countedBarcodes, totalPrice })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Alışveriş kaydı başarıyla kaydedildi:', data);
        // Başka bir işlem yapabilirsiniz (örneğin, kullanıcıya bilgi vermek için)
    })
    .catch(error => {
        console.error('Alışveriş kaydı sırasında bir hata oluştu:', error);
    });

    // Sonuçları temizle
    barcodes = [];
    countedBarcodes = {};
    totalPrice = 0;
    renderBarcodeList();
    resultsDiv.innerHTML = '';
  }

  function downOfStock(barcode, count) {
    // Backend'e POST request yaparak stoktan düşme işlemini gerçekleştir
    fetch('/downStock', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ barcode, count })
    })
    .then(response => response.json())
    .then(data => {
      if (data.status === 200) {
        console.log(data.message);
      } else if (data.status === 404) {
        console.error('Stoktan düşürme işleminde hata:', data.message);
      }
    })
    .catch(error => {
      console.error('Stoktan düşürme işleminde bir hata oluştu:', error);
    });
  }

  closeRegisterButton.addEventListener('click', function() {
    closeRegister();
  });
</script>

</body>
</html>
